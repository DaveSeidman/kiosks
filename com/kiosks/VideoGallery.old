package com.kiosks {

	import flash.display.MovieClip;
	import flash.display.Sprite;
	import flash.filesystem.File;
	import flash.display.Loader;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.events.IOErrorEvent;
	import flash.net.URLRequest;
	import flash.utils.setTimeout;
	import flash.errors.IOError;
	import flash.events.ErrorEvent;
		
	import com.greensock.TweenLite;
	import com.greensock.easing.*;
	import com.greensock.plugins.TweenPlugin;
	import com.greensock.plugins.AutoAlphaPlugin; 	
	import com.kiosks.Tracer;
	import com.kiosks.VideoThumbnail;
	import com.kiosks.VideoControls;

	import fl.video.FLVPlayback;
	import fl.video.VideoEvent;
	import flash.text.TextFormat;
	
	public class VideoGallery extends Sprite {

		private var videoArray = new Array();
		private var path;
		private var thumbs = new Sprite;
		private var thumbnails = new Sprite;
		private var thumbOffset = 0;
		
		private var controls;
		private var mainVideo;
		private var videoCover;
		
		private var oldY;
		private var difY;
		
		private var scrolled:Boolean = false; // used to distinguish between a click and a scroll on video thumbs
		
		private var textFormat;
		
		public function VideoGallery(name:String) {
			
			Tracer("creating new Video Gallery: " + name);
			TweenPlugin.activate([AutoAlphaPlugin]);
			path = "Content/" + name + "/Videos";
			var dir:File = File.applicationDirectory.resolvePath(path);
			videoArray = dir.getDirectoryListing();
			
			thumbs.x = 1360;
			thumbs.y = 0;
			addEventListener(MouseEvent.MOUSE_UP, stopScrolling);
			thumbnails.y = 125;
			addChild(thumbnails);
			thumbnails.addChild(thumbs);
			thumbs.cacheAsBitmap = true;
			thumbnailsMask.cacheAsBitmap = true;
			thumbs.mask = thumbnailsMask;
			
			sectionTitle.title.text = name;
			setChildIndex(sectionTitle, numChildren-1);
			
			vidTitle.alpha = 0;
			textFormat = new TextFormat();
			textFormat.letterSpacing = -2;
						
			mainVideo = new FLVPlayback;
			mainVideo.autoPlay = true;
			mainVideo.width = 1280;


			controls = new VideoControls(mainVideo);
			mainVideo.height = 720;
			mainVideo.x = 40;
			mainVideo.y = 40;
			addChild(mainVideo);
			
			videoCover = new VideoCover;
			videoCover.x = videoCover.y = 40;
			addChild(videoCover);
			
			controls.x = 40;
			controls.y = 770;
			addChild(controls);
			
			videoCover.addEventListener(MouseEvent.CLICK, controls.playPauseClicked);
						
			Tracer("Loading Videos:");
			for(var i:uint = 0; i < videoArray.length; i++) {
				Tracer("-->"+videoArray[i].name);
				var thumb = new VideoThumbnail(path, videoArray[i].name);
				thumb.y = thumbs.height;
				thumb.mouseChildren = false;
				thumb.addEventListener(MouseEvent.MOUSE_UP, thumbnailClicked);
				thumbs.addChild(thumb);				
			}
			if(thumbs.height > thumbnailsMask.height) thumbs.addEventListener(MouseEvent.MOUSE_DOWN, startScrolling);
			
		}
		
		
		private function thumbnailClicked(e:MouseEvent):void {
			
			if(!scrolled) {
				
				vidTitle.text = e.target.videoTitle;
				vidTitle.setTextFormat(textFormat);
				Tracer(e.target.videoTitle);
				TweenLite.to(vidTitle, .5, { alpha:1 });
				TweenLite.to(videoCover, .5, { alpha:0 });
				TweenLite.to(controls, .5, { alpha:1 });
				
				mainVideo.stop();
				mainVideo.source = e.target.videoSource;
				mainVideo.play();
				controls.init(e.target.duration);
			}
		}
		
		private function startScrolling(e:MouseEvent):void {

			thumbOffset = thumbs.mouseY;
			scrolled = false;
			addEventListener(MouseEvent.MOUSE_MOVE, scrollThumbs);
			difY = 0;
		}
		
		private function scrollThumbs(e:MouseEvent):void {
			
			scrolled = true;
			difY = thumbnails.mouseY - oldY;
			thumbs.y = thumbnails.mouseY - thumbOffset;
			oldY = thumbnails.mouseY;
		}
		
		private function stopScrolling(e:MouseEvent):void {
			trace(difY);
			removeEventListener(MouseEvent.MOUSE_MOVE, scrollThumbs);
			if(difY) TweenLite.to(thumbs, .5, { y:thumbs.y + difY * 5 });
			if(thumbs.y > 0) TweenLite.to(thumbs, .5, { y:0 });
			if(thumbs.height > thumbnailsMask.height) if(thumbs.y < thumbnailsMask.height - thumbs.height - 50) TweenLite.to(thumbs, .5, { y:thumbnailsMask.height - thumbs.height - 50});
		}

		public function openIt():void {
			
			Tracer("opening video gallery");
			thumbs.y = 0;
			for(var i:uint = 0; i < thumbs.numChildren; i++) {
				
				var thumb = thumbs.getChildAt(i);
				var position = thumb.y;
				thumb.y = 1200;
				TweenLite.to(thumb, .6, { y:position, delay:(i*.25) - (i/10), ease:Expo.easeInOut });
			}
		}
		
		public function closeIt():void {
			
			vidTitle.alpha = 0;
			videoCover.alpha = 1;
			controls.alpha = 0;
			try {
				if(mainVideo.playing) controls.playPauseClicked();
			}
			catch(error:*) {
				Tracer("no video playing?");
			}
		}
	}
}
